extends layout

append head
    link(rel='stylesheet', href='/cillmit99b/api.css')

block content
    h1 API

    p.
        This is the #{siteName} API documentation. 
        There is an API Endpoints section and an API User Authentication section below.

    h2 API Endpoints

    p.
        The full URL for all endpoints starts with #[em https://www.commentcastles.org/api/v1]. All endpoints return JSON. Here are the details of each endpoint:

    h3 GET /posts

    p.
        This returns all posts, exactly like the #[a(href="/") homepage].
        The data is paginated at 20 posts per page.

    h4 Query Params

    ul
        li #[b p]: page number for post pagination, the default page number is 1, optional
        li #[b viewmode]: if this is "discover" then the discover view mode is used, otherwise the locked view mode is used, see #[a(href="/manual#settings") settings] in the manual for more info, if you use an authorization header then the user's view mode is pulled from the database and this param is ignored, optional
        li #[b sort]: this is for post sorting, it can be either #[em newest], #[em oldest], #[em comments] or #[em last], see #[a(href="/manual#posts") posts] in the manual for more info, the default is #[em newest], optional

    h4 Headers

    ul
        li #[b Authorization: Bearer xxx]: replace xxx with an OAuth 2 access token to make this call with a logged in user (see API User Authentication), optional

    h4 Examples

    p
        a(href="/api/v1/posts") /posts

    p
        a(href="/api/v1/posts?p=2") /posts?p=2

    p
        a(href="/api/v1/posts?viewmode=discover") /posts?viewmode=discover

    p
        a(href="/api/v1/posts?viewmode=discover&p=2") /posts?viewmode=discover&p=2

    p
        a(href="/api/v1/posts?sort=comments") /posts?sort=comments

    p
        a(href="/api/v1/posts?sort=last&viewmode=discover&p=2") /posts?sort=last&viewmode=discover&p=2

    h3 GET /post

    p.
        This call will return a single post and its comments.

    h4 Query Params

    ul
        li #[b postid]: the post id of the post you want to get, required
        li #[b p]: page number for comment pagination, there are #{commentsPerPage} comments per page, the default page number is 1, optional
        li #[b viewmode]: if this is "discover" then the discover view mode is used, otherwise the locked view mode is used, see #[a(href="/manual#settings") settings] in the manual for more info, if you use an authorization header then the user's view mode is pulled from the database and this param is ignored, optional

    h4 Headers

    ul
        li #[b Authorization: Bearer xxx]: replace xxx with an OAuth 2 access token to make this call with a logged in user (see API User Authentication), optional

    h4 Examples

    p
        a(href="/api/v1/post?postid=SxqYZnDk26oisgSCS9bTjN") /post?postid=SxqYZnDk26oisgSCS9bTjN

    h3 GET /comment

    p.
        This call will return a single comment and its subcomments.

    h4 Query Params

    ul
        li #[b commentid]: the comment id of the comment you want to get, required
        li #[b p]: page number for subcomment pagination, there are #{commentsPerPage} subcomments per page, the default page number is 1, optional
        li #[b viewmode]: if this is "discover" then the discover view mode is used, otherwise the locked view mode is used, see #[a(href="/manual#settings") settings] in the manual for more info, if you use an authorization header then the user's view mode is pulled from the database and this param is ignored, optional

    h4 Headers

    ul
        li #[b Authorization: Bearer xxx]: replace xxx with an OAuth 2 access token to make this call with a logged in user (see API User Authentication), optional

    h4 Examples

    p
        a(href="/api/v1/comment?commentid=utePeJTWFGjstaQfbVntPn") /comment?commentid=utePeJTWFGjstaQfbVntPn

    h2 API User Authentication

    p.
        You can authenticate users for API calls by using OAuth 2. Here are the instructions for how to use our OAuth 2 setup:
    
    p.
        #[b Step 1:] Sign up, log in and go to app IDs in the settings. Register your app by specifying a name and a redirect URI. Once you register your app the client ID will show. You will need to use the client ID and redirect URI in later steps.
    
    p.
        #[b Step 2:] In the app you're building, make the login button display this page in the browser:
    
    p.
        https://www.commentcastles.org/oauth/authorize?client_id=xxx&state=yyy&response_type=code&redirect_uri=zzz
    
    p.
        Replace xxx with your client ID, replace yyy with a state value (it can be anything), and fill in zzz with your redirect URI (it must match the redirect URI from step 1).
    
    p.
        When a user visits the above URL they have to click a confirm button.
    
    p.
        #[b Step 3:] When a user clicks the confirm button they will be redirected to your redirect URI with a state variable and a code variable in the URL. The code variable is an authorization code. The app you're building now requests POST /oauth/token. Here is the request in PowerShell: 
    
    p.
        Invoke-WebRequest -Uri https://www.commentcastles.org/oauth/token -Method POST -Body @{client_id='xxx';grant_type='authorization_code';code='yyy';redirect_uri='zzz'}
    
    p.
        Replace xxx with your client ID, replace yyy with the authorization code that was in the URL, and use your redirect URI for zzz. If successful, the above URL request will return JSON that contains an access token.

    p.
        #[b Step 4:] Now you can pass the access token to API calls and it will be as if a user is logged in. For example, in PowerShell:

    p.
        Invoke-RestMethod -Method Get -Uri "https://www.commentcastles.org/api/v1/posts" -Headers @{Authorization='Bearer xxx'}
    
    p.
        Replace xxx with your access token obtained from step 3.
